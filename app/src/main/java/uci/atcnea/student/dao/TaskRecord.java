package uci.atcnea.student.dao;

import uci.atcnea.student.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TASK_RECORD".
 */
public class TaskRecord {

    private Long id;
    private Boolean resourceStatus;
    private long taskId;
    private long resourceId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TaskRecordDao myDao;

    private Resource resource;
    private Long resource__resolvedKey;

    private Task task;
    private Long task__resolvedKey;


    public TaskRecord() {
    }

    public TaskRecord(Long id) {
        this.id = id;
    }

    public TaskRecord(Long id, Boolean resourceStatus, long taskId, long resourceId) {
        this.id = id;
        this.resourceStatus = resourceStatus;
        this.taskId = taskId;
        this.resourceId = resourceId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Boolean getResourceStatus() {
        return resourceStatus;
    }

    public void setResourceStatus(Boolean resourceStatus) {
        this.resourceStatus = resourceStatus;
    }

    public long getTaskId() {
        return taskId;
    }

    public void setTaskId(long taskId) {
        this.taskId = taskId;
    }

    public long getResourceId() {
        return resourceId;
    }

    public void setResourceId(long resourceId) {
        this.resourceId = resourceId;
    }

    /** To-one relationship, resolved on first access. */
    public Resource getResource() {
        long __key = this.resourceId;
        if (resource__resolvedKey == null || !resource__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ResourceDao targetDao = daoSession.getResourceDao();
            Resource resourceNew = targetDao.load(__key);
            synchronized (this) {
                resource = resourceNew;
            	resource__resolvedKey = __key;
            }
        }
        return resource;
    }

    public void setResource(Resource resource) {
        if (resource == null) {
            throw new DaoException("To-one property 'resourceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.resource = resource;
            resourceId = resource.getId();
            resource__resolvedKey = resourceId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Task getTask() {
        long __key = this.taskId;
        if (task__resolvedKey == null || !task__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            Task taskNew = targetDao.load(__key);
            synchronized (this) {
                task = taskNew;
            	task__resolvedKey = __key;
            }
        }
        return task;
    }

    public void setTask(Task task) {
        if (task == null) {
            throw new DaoException("To-one property 'taskId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.task = task;
            taskId = task.getId();
            task__resolvedKey = taskId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
