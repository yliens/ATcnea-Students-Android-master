package uci.atcnea.student.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import uci.atcnea.student.dao.TaskRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_RECORD".
*/
public class TaskRecordDao extends AbstractDao<TaskRecord, Long> {

    public static final String TABLENAME = "TASK_RECORD";

    /**
     * Properties of entity TaskRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ResourceStatus = new Property(1, Boolean.class, "resourceStatus", false, "RESOURCE_STATUS");
        public final static Property TaskId = new Property(2, long.class, "taskId", false, "TASK_ID");
        public final static Property ResourceId = new Property(3, long.class, "resourceId", false, "RESOURCE_ID");
    };

    private DaoSession daoSession;

    private Query<TaskRecord> task_TaskRecordQuery;

    public TaskRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TaskRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RESOURCE_STATUS\" INTEGER," + // 1: resourceStatus
                "\"TASK_ID\" INTEGER NOT NULL ," + // 2: taskId
                "\"RESOURCE_ID\" INTEGER NOT NULL );"); // 3: resourceId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TaskRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean resourceStatus = entity.getResourceStatus();
        if (resourceStatus != null) {
            stmt.bindLong(2, resourceStatus ? 1L: 0L);
        }
        stmt.bindLong(3, entity.getTaskId());
        stmt.bindLong(4, entity.getResourceId());
    }

    @Override
    protected void attachEntity(TaskRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TaskRecord readEntity(Cursor cursor, int offset) {
        TaskRecord entity = new TaskRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // resourceStatus
            cursor.getLong(offset + 2), // taskId
            cursor.getLong(offset + 3) // resourceId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TaskRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResourceStatus(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setTaskId(cursor.getLong(offset + 2));
        entity.setResourceId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TaskRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TaskRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "taskRecord" to-many relationship of Task. */
    public List<TaskRecord> _queryTask_TaskRecord(long taskId) {
        synchronized (this) {
            if (task_TaskRecordQuery == null) {
                QueryBuilder<TaskRecord> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TaskId.eq(null));
                task_TaskRecordQuery = queryBuilder.build();
            }
        }
        Query<TaskRecord> query = task_TaskRecordQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getResourceDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTaskDao().getAllColumns());
            builder.append(" FROM TASK_RECORD T");
            builder.append(" LEFT JOIN RESOURCE T0 ON T.\"RESOURCE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TASK T1 ON T.\"TASK_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TaskRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        TaskRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Resource resource = loadCurrentOther(daoSession.getResourceDao(), cursor, offset);
         if(resource != null) {
            entity.setResource(resource);
        }
        offset += daoSession.getResourceDao().getAllColumns().length;

        Task task = loadCurrentOther(daoSession.getTaskDao(), cursor, offset);
         if(task != null) {
            entity.setTask(task);
        }

        return entity;    
    }

    public TaskRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TaskRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TaskRecord> list = new ArrayList<TaskRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TaskRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TaskRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
