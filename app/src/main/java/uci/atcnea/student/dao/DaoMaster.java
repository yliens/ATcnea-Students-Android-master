package uci.atcnea.student.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import uci.atcnea.student.dao.UserDao;
import uci.atcnea.student.dao.LessonDao;
import uci.atcnea.student.dao.NomenclatorDao;
import uci.atcnea.student.dao.ResourceDao;
import uci.atcnea.student.dao.FileRecordDao;
import uci.atcnea.student.dao.UserLessonDao;
import uci.atcnea.student.dao.GroupDao;
import uci.atcnea.student.dao.MessageDao;
import uci.atcnea.student.dao.TaskDao;
import uci.atcnea.student.dao.TaskRecordDao;
import uci.atcnea.student.dao.ConfigDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserDao.createTable(db, ifNotExists);
        LessonDao.createTable(db, ifNotExists);
        NomenclatorDao.createTable(db, ifNotExists);
        ResourceDao.createTable(db, ifNotExists);
        FileRecordDao.createTable(db, ifNotExists);
        UserLessonDao.createTable(db, ifNotExists);
        GroupDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        TaskDao.createTable(db, ifNotExists);
        TaskRecordDao.createTable(db, ifNotExists);
        ConfigDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserDao.dropTable(db, ifExists);
        LessonDao.dropTable(db, ifExists);
        NomenclatorDao.dropTable(db, ifExists);
        ResourceDao.dropTable(db, ifExists);
        FileRecordDao.dropTable(db, ifExists);
        UserLessonDao.dropTable(db, ifExists);
        GroupDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        TaskDao.dropTable(db, ifExists);
        TaskRecordDao.dropTable(db, ifExists);
        ConfigDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserDao.class);
        registerDaoClass(LessonDao.class);
        registerDaoClass(NomenclatorDao.class);
        registerDaoClass(ResourceDao.class);
        registerDaoClass(FileRecordDao.class);
        registerDaoClass(UserLessonDao.class);
        registerDaoClass(GroupDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(TaskDao.class);
        registerDaoClass(TaskRecordDao.class);
        registerDaoClass(ConfigDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
