package uci.atcnea.student.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import uci.atcnea.student.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Enable = new Property(1, Boolean.class, "enable", false, "ENABLE");
        public final static Property ImagePath = new Property(2, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property ProfileJson = new Property(5, String.class, "profileJson", false, "PROFILE_JSON");
        public final static Property CreatedAt = new Property(6, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(7, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property SavePassword = new Property(8, Boolean.class, "savePassword", false, "SAVE_PASSWORD");
        public final static Property NomenclatorId = new Property(9, long.class, "nomenclatorId", false, "NOMENCLATOR_ID");
    };

    private DaoSession daoSession;

    private Query<User> nomenclator_UserQuery;

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ENABLE\" INTEGER," + // 1: enable
                "\"IMAGE_PATH\" TEXT," + // 2: imagePath
                "\"USERNAME\" TEXT NOT NULL UNIQUE ," + // 3: username
                "\"PASSWORD\" TEXT," + // 4: password
                "\"PROFILE_JSON\" TEXT," + // 5: profileJson
                "\"CREATED_AT\" TEXT," + // 6: createdAt
                "\"UPDATED_AT\" TEXT," + // 7: updatedAt
                "\"SAVE_PASSWORD\" INTEGER," + // 8: savePassword
                "\"NOMENCLATOR_ID\" INTEGER NOT NULL );"); // 9: nomenclatorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(2, enable ? 1L: 0L);
        }
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(3, imagePath);
        }
        stmt.bindString(4, entity.getUsername());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String profileJson = entity.getProfileJson();
        if (profileJson != null) {
            stmt.bindString(6, profileJson);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(7, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(8, updatedAt);
        }
 
        Boolean savePassword = entity.getSavePassword();
        if (savePassword != null) {
            stmt.bindLong(9, savePassword ? 1L: 0L);
        }
        stmt.bindLong(10, entity.getNomenclatorId());
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // enable
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imagePath
            cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // profileJson
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createdAt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updatedAt
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // savePassword
            cursor.getLong(offset + 9) // nomenclatorId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnable(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setImagePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfileJson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatedAt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdatedAt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSavePassword(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setNomenclatorId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "user" to-many relationship of Nomenclator. */
    public List<User> _queryNomenclator_User(long nomenclatorId) {
        synchronized (this) {
            if (nomenclator_UserQuery == null) {
                QueryBuilder<User> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NomenclatorId.eq(null));
                nomenclator_UserQuery = queryBuilder.build();
            }
        }
        Query<User> query = nomenclator_UserQuery.forCurrentThread();
        query.setParameter(0, nomenclatorId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getNomenclatorDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN NOMENCLATOR T0 ON T.\"NOMENCLATOR_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Nomenclator nomenclator = loadCurrentOther(daoSession.getNomenclatorDao(), cursor, offset);
         if(nomenclator != null) {
            entity.setNomenclator(nomenclator);
        }

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
