package uci.atcnea.student.dao;

import java.util.List;
import uci.atcnea.student.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "LESSON".
 */
public class Lesson {

    private Long id;
    private long idLesson;
    /** Not-null value. */
    private String ipDireccion;
    /** Not-null value. */
    private String macDireccion;
    /** Not-null value. */
    private String lessonName;
    /** Not-null value. */
    private String capacityState;
    /** Not-null value. */
    private String teacherName;
    /** Not-null value. */
    private String authenticationType;
    private byte[] imageTeacher;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LessonDao myDao;

    private List<Resource> resource;
    private List<Task> task;
    private List<UserLesson> userLesson;
    private List<Group> group;

    public Lesson() {
    }

    public Lesson(Long id) {
        this.id = id;
    }

    public Lesson(Long id, long idLesson, String ipDireccion, String macDireccion, String lessonName, String capacityState, String teacherName, String authenticationType, byte[] imageTeacher) {
        this.id = id;
        this.idLesson = idLesson;
        this.ipDireccion = ipDireccion;
        this.macDireccion = macDireccion;
        this.lessonName = lessonName;
        this.capacityState = capacityState;
        this.teacherName = teacherName;
        this.authenticationType = authenticationType;
        this.imageTeacher = imageTeacher;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLessonDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getIdLesson() {
        return idLesson;
    }

    public void setIdLesson(long idLesson) {
        this.idLesson = idLesson;
    }

    /** Not-null value. */
    public String getIpDireccion() {
        return ipDireccion;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIpDireccion(String ipDireccion) {
        this.ipDireccion = ipDireccion;
    }

    /** Not-null value. */
    public String getMacDireccion() {
        return macDireccion;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMacDireccion(String macDireccion) {
        this.macDireccion = macDireccion;
    }

    /** Not-null value. */
    public String getLessonName() {
        return lessonName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLessonName(String lessonName) {
        this.lessonName = lessonName;
    }

    /** Not-null value. */
    public String getCapacityState() {
        return capacityState;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCapacityState(String capacityState) {
        this.capacityState = capacityState;
    }

    /** Not-null value. */
    public String getTeacherName() {
        return teacherName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTeacherName(String teacherName) {
        this.teacherName = teacherName;
    }

    /** Not-null value. */
    public String getAuthenticationType() {
        return authenticationType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAuthenticationType(String authenticationType) {
        this.authenticationType = authenticationType;
    }

    public byte[] getImageTeacher() {
        return imageTeacher;
    }

    public void setImageTeacher(byte[] imageTeacher) {
        this.imageTeacher = imageTeacher;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Resource> getResource() {
        if (resource == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ResourceDao targetDao = daoSession.getResourceDao();
            List<Resource> resourceNew = targetDao._queryLesson_Resource(id);
            synchronized (this) {
                if(resource == null) {
                    resource = resourceNew;
                }
            }
        }
        return resource;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetResource() {
        resource = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Task> getTask() {
        if (task == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> taskNew = targetDao._queryLesson_Task(id);
            synchronized (this) {
                if(task == null) {
                    task = taskNew;
                }
            }
        }
        return task;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTask() {
        task = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UserLesson> getUserLesson() {
        if (userLesson == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserLessonDao targetDao = daoSession.getUserLessonDao();
            List<UserLesson> userLessonNew = targetDao._queryLesson_UserLesson(id);
            synchronized (this) {
                if(userLesson == null) {
                    userLesson = userLessonNew;
                }
            }
        }
        return userLesson;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserLesson() {
        userLesson = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Group> getGroup() {
        if (group == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupDao targetDao = daoSession.getGroupDao();
            List<Group> groupNew = targetDao._queryLesson_Group(id);
            synchronized (this) {
                if(group == null) {
                    group = groupNew;
                }
            }
        }
        return group;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroup() {
        group = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
