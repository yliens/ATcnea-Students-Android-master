package uci.atcnea.student.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import uci.atcnea.student.dao.Lesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON".
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "LESSON";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdLesson = new Property(1, long.class, "idLesson", false, "ID_LESSON");
        public final static Property IpDireccion = new Property(2, String.class, "ipDireccion", false, "IP_DIRECCION");
        public final static Property MacDireccion = new Property(3, String.class, "macDireccion", false, "MAC_DIRECCION");
        public final static Property LessonName = new Property(4, String.class, "lessonName", false, "LESSON_NAME");
        public final static Property CapacityState = new Property(5, String.class, "capacityState", false, "CAPACITY_STATE");
        public final static Property TeacherName = new Property(6, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property AuthenticationType = new Property(7, String.class, "authenticationType", false, "AUTHENTICATION_TYPE");
        public final static Property ImageTeacher = new Property(8, byte[].class, "imageTeacher", false, "IMAGE_TEACHER");
    };

    private DaoSession daoSession;


    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_LESSON\" INTEGER NOT NULL ," + // 1: idLesson
                "\"IP_DIRECCION\" TEXT NOT NULL ," + // 2: ipDireccion
                "\"MAC_DIRECCION\" TEXT NOT NULL ," + // 3: macDireccion
                "\"LESSON_NAME\" TEXT NOT NULL ," + // 4: lessonName
                "\"CAPACITY_STATE\" TEXT NOT NULL ," + // 5: capacityState
                "\"TEACHER_NAME\" TEXT NOT NULL ," + // 6: teacherName
                "\"AUTHENTICATION_TYPE\" TEXT NOT NULL ," + // 7: authenticationType
                "\"IMAGE_TEACHER\" BLOB);"); // 8: imageTeacher
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdLesson());
        stmt.bindString(3, entity.getIpDireccion());
        stmt.bindString(4, entity.getMacDireccion());
        stmt.bindString(5, entity.getLessonName());
        stmt.bindString(6, entity.getCapacityState());
        stmt.bindString(7, entity.getTeacherName());
        stmt.bindString(8, entity.getAuthenticationType());
 
        byte[] imageTeacher = entity.getImageTeacher();
        if (imageTeacher != null) {
            stmt.bindBlob(9, imageTeacher);
        }
    }

    @Override
    protected void attachEntity(Lesson entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // idLesson
            cursor.getString(offset + 2), // ipDireccion
            cursor.getString(offset + 3), // macDireccion
            cursor.getString(offset + 4), // lessonName
            cursor.getString(offset + 5), // capacityState
            cursor.getString(offset + 6), // teacherName
            cursor.getString(offset + 7), // authenticationType
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8) // imageTeacher
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdLesson(cursor.getLong(offset + 1));
        entity.setIpDireccion(cursor.getString(offset + 2));
        entity.setMacDireccion(cursor.getString(offset + 3));
        entity.setLessonName(cursor.getString(offset + 4));
        entity.setCapacityState(cursor.getString(offset + 5));
        entity.setTeacherName(cursor.getString(offset + 6));
        entity.setAuthenticationType(cursor.getString(offset + 7));
        entity.setImageTeacher(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
