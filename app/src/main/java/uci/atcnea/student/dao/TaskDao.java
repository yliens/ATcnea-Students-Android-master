package uci.atcnea.student.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import uci.atcnea.student.dao.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskIdClass = new Property(1, Long.class, "taskIdClass", false, "TASK_ID_CLASS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property BeginDate = new Property(4, Long.class, "beginDate", false, "BEGIN_DATE");
        public final static Property EndDate = new Property(5, Long.class, "endDate", false, "END_DATE");
        public final static Property AllowText = new Property(6, Boolean.class, "allowText", false, "ALLOW_TEXT");
        public final static Property ResponseText = new Property(7, String.class, "responseText", false, "RESPONSE_TEXT");
        public final static Property AllowResources = new Property(8, Boolean.class, "allowResources", false, "ALLOW_RESOURCES");
        public final static Property FilesLimit = new Property(9, Integer.class, "filesLimit", false, "FILES_LIMIT");
        public final static Property SizeLimit = new Property(10, Integer.class, "sizeLimit", false, "SIZE_LIMIT");
        public final static Property Note = new Property(11, String.class, "note", false, "NOTE");
        public final static Property TaskStatus = new Property(12, Integer.class, "taskStatus", false, "TASK_STATUS");
        public final static Property TaskMode = new Property(13, Integer.class, "taskMode", false, "TASK_MODE");
        public final static Property UserId = new Property(14, long.class, "userId", false, "USER_ID");
        public final static Property LessonId = new Property(15, long.class, "lessonId", false, "LESSON_ID");
    };

    private DaoSession daoSession;

    private Query<Task> user_TaskQuery;
    private Query<Task> lesson_TaskQuery;

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID_CLASS\" INTEGER," + // 1: taskIdClass
                "\"NAME\" TEXT," + // 2: name
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"BEGIN_DATE\" INTEGER," + // 4: beginDate
                "\"END_DATE\" INTEGER," + // 5: endDate
                "\"ALLOW_TEXT\" INTEGER," + // 6: allowText
                "\"RESPONSE_TEXT\" TEXT," + // 7: responseText
                "\"ALLOW_RESOURCES\" INTEGER," + // 8: allowResources
                "\"FILES_LIMIT\" INTEGER," + // 9: filesLimit
                "\"SIZE_LIMIT\" INTEGER," + // 10: sizeLimit
                "\"NOTE\" TEXT," + // 11: note
                "\"TASK_STATUS\" INTEGER," + // 12: taskStatus
                "\"TASK_MODE\" INTEGER," + // 13: taskMode
                "\"USER_ID\" INTEGER NOT NULL ," + // 14: userId
                "\"LESSON_ID\" INTEGER NOT NULL );"); // 15: lessonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long taskIdClass = entity.getTaskIdClass();
        if (taskIdClass != null) {
            stmt.bindLong(2, taskIdClass);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Long beginDate = entity.getBeginDate();
        if (beginDate != null) {
            stmt.bindLong(5, beginDate);
        }
 
        Long endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(6, endDate);
        }
 
        Boolean allowText = entity.getAllowText();
        if (allowText != null) {
            stmt.bindLong(7, allowText ? 1L: 0L);
        }
 
        String responseText = entity.getResponseText();
        if (responseText != null) {
            stmt.bindString(8, responseText);
        }
 
        Boolean allowResources = entity.getAllowResources();
        if (allowResources != null) {
            stmt.bindLong(9, allowResources ? 1L: 0L);
        }
 
        Integer filesLimit = entity.getFilesLimit();
        if (filesLimit != null) {
            stmt.bindLong(10, filesLimit);
        }
 
        Integer sizeLimit = entity.getSizeLimit();
        if (sizeLimit != null) {
            stmt.bindLong(11, sizeLimit);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        Integer taskStatus = entity.getTaskStatus();
        if (taskStatus != null) {
            stmt.bindLong(13, taskStatus);
        }
 
        Integer taskMode = entity.getTaskMode();
        if (taskMode != null) {
            stmt.bindLong(14, taskMode);
        }
        stmt.bindLong(15, entity.getUserId());
        stmt.bindLong(16, entity.getLessonId());
    }

    @Override
    protected void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // taskIdClass
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // beginDate
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // endDate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // allowText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // responseText
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // allowResources
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // filesLimit
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sizeLimit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // note
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // taskStatus
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // taskMode
            cursor.getLong(offset + 14), // userId
            cursor.getLong(offset + 15) // lessonId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskIdClass(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBeginDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEndDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAllowText(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setResponseText(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAllowResources(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setFilesLimit(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSizeLimit(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setNote(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTaskStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTaskMode(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setUserId(cursor.getLong(offset + 14));
        entity.setLessonId(cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "task" to-many relationship of User. */
    public List<Task> _queryUser_Task(long userId) {
        synchronized (this) {
            if (user_TaskQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_TaskQuery = queryBuilder.build();
            }
        }
        Query<Task> query = user_TaskQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "task" to-many relationship of Lesson. */
    public List<Task> _queryLesson_Task(long lessonId) {
        synchronized (this) {
            if (lesson_TaskQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LessonId.eq(null));
                lesson_TaskQuery = queryBuilder.build();
            }
        }
        Query<Task> query = lesson_TaskQuery.forCurrentThread();
        query.setParameter(0, lessonId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLessonDao().getAllColumns());
            builder.append(" FROM TASK T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN LESSON T1 ON T.\"LESSON_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Task loadCurrentDeep(Cursor cursor, boolean lock) {
        Task entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        Lesson lesson = loadCurrentOther(daoSession.getLessonDao(), cursor, offset);
         if(lesson != null) {
            entity.setLesson(lesson);
        }

        return entity;    
    }

    public Task loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Task> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Task> list = new ArrayList<Task>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Task> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Task> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
